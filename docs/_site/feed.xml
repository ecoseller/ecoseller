<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-07-16T14:21:05+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ecoseller</title><subtitle>ecoseller e-commerce platform documentation</subtitle><author><name>{&quot;name&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil}</name></author><entry><title type="html">Contributions</title><link href="http://localhost:4000/2016/01/12/contributions/" rel="alternate" type="text/html" title="Contributions" /><published>2016-01-12T00:00:00+00:00</published><updated>2016-01-12T00:00:00+00:00</updated><id>http://localhost:4000/2016/01/12/contributions</id><content type="html" xml:base="http://localhost:4000/2016/01/12/contributions/">&lt;p&gt;To contribute to ecoseller, please stick to the following rules:&lt;/p&gt;

&lt;h1 id=&quot;git-workflow&quot;&gt;GIT Workflow&lt;/h1&gt;

&lt;p&gt;When working on a project, it is important to have a workflow that is easy to understand and follow. This document describes the workflow that we use at &lt;a href=&quot;https://ecoseller.io/&quot;&gt;ecoseller&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;working-on-a-new-featurebug&quot;&gt;Working on a new feature/bug&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Update your master branch - on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch run the following:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git pull origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a new branch and checkout to it
    &lt;ul&gt;
      &lt;li&gt;follow naming convetion for branch names &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T-&amp;lt;task-number&amp;gt;&lt;/code&gt;
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git checkout -b T-&amp;lt;task-number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Work on a given feature/bug. Commit your work often (you do not need to push these commits to remote branch)
    &lt;ul&gt;
      &lt;li&gt;follow naming convention for commits &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[T-&amp;lt;task-numbe&amp;gt;] &amp;lt;short-description&amp;gt;&lt;/code&gt;
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git add .
 git commit -m &quot;[T-&amp;lt;task-number&amp;gt;] &amp;lt;short-description&amp;gt;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Push changes to remote branch
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git push origin T-&amp;lt;task-number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;First push to remote branch will create pull request - go to the project github page and click on &lt;em&gt;Compare &amp;amp; pull request&lt;/em&gt; button&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;../images/git_pull_request.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If you are not done with the feature/bug yet, mark this pull request as draft&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../images/git_pull_request_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;After feature/bug is done, fill in nice description, mark pull request as ready and send it to review&lt;/li&gt;
  &lt;li&gt;When a feature/bug branch is ready to be merged into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch, do the following:
    &lt;ol&gt;
      &lt;li&gt;Update your master branch to the latest state
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  git checkout master
  git pull origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;Checkout to feature/bug branch
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git checkout T-&amp;lt;task-number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;Rebase feature/bug branch on top of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch and squash commits into one
        &lt;ul&gt;
          &lt;li&gt;This can be achieved via interactive rebase (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-i&lt;/code&gt; option) which will bring up editor where you can squash all commits to the first one (let &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pick&lt;/code&gt; option for the first commit and on all the follwoing commits use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; option)&lt;/li&gt;
          &lt;li&gt;After squashing, do not forget about naming convention of representative commit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[T-&amp;lt;task-numbe&amp;gt;] &amp;lt;short-description&amp;gt;&lt;/code&gt;
            &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git rebase -i master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;Fix all potential conflicts while rebasing&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Checkout to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch and merge feature/task branch
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git checkout master
 git merge T-&amp;lt;task-number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;linear-history&quot;&gt;Linear history&lt;/h2&gt;
&lt;p&gt;Applying this workflow keeps the git history of a project &lt;strong&gt;linear&lt;/strong&gt;. That is good for the following reasons:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Easier to read
    &lt;ul&gt;
      &lt;li&gt;History is more clear&lt;/li&gt;
      &lt;li&gt;No useless commits and new merge commits&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Easier reverting and cherry-picking&lt;/li&gt;
  &lt;li&gt;Git bisect&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-to-do-when&quot;&gt;What to do when&lt;/h2&gt;
&lt;h3 id=&quot;forgot-to-create-a-new-branch&quot;&gt;Forgot to create a new branch&lt;/h3&gt;
&lt;p&gt;You already made some changes and forgot to switch to new branch. At this point its easy fix, just add what you have done so far and then switch to new branch:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add .
git checkout -b T-&amp;lt;task-number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;useful-commands-to-remember&quot;&gt;Useful commands to remember&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt; - shows commits log
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--oneline&lt;/code&gt; option&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; - status on current branch&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git fetch origin&lt;/code&gt; - fetch remote branches&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset HEAD~&amp;lt;number&amp;gt;&lt;/code&gt; - moves &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; pointer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;number&amp;gt;&lt;/code&gt; commits behind
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--hard&lt;/code&gt; option - discards local changes&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--soft&lt;/code&gt; option - keeps local changes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;continuous-integration&quot;&gt;Continuous integration&lt;/h1&gt;

&lt;p&gt;We use &lt;a href=&quot;https://docs.github.com/en/actions&quot;&gt;Github actions&lt;/a&gt; for CI.&lt;br /&gt;
There are multiple jobs set up (1 for each project component + action for docker compose), which automatically run on every commit to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch
and pull request update.&lt;/p&gt;

&lt;h2 id=&quot;what-to-do-if-ci-jobs-fail&quot;&gt;What to do if CI jobs fail&lt;/h2&gt;
&lt;p&gt;See the error in Github Action detail.&lt;/p&gt;

&lt;p&gt;If itâ€™s a linter/formatter error, see the section of corresponding component.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#backend&quot;&gt;backend&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dashboard&quot;&gt;dashboard&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#storefront&quot;&gt;storefront&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#recommender&quot;&gt;recommender&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Follow the instructions for linting / formatting.&lt;/p&gt;

&lt;p&gt;After everything works locally, commit and push the changes, CI jobs will start automatically.&lt;/p&gt;

&lt;h3 id=&quot;backend&quot;&gt;Backend&lt;/h3&gt;

&lt;h4 id=&quot;black&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;black&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Weâ€™re using &lt;a href=&quot;https://black.readthedocs.io/en/stable/&quot;&gt;black&lt;/a&gt; code formatter.&lt;/p&gt;

&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;black ./core
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to format source files (you need to have virtual env activated).&lt;/p&gt;

&lt;h4 id=&quot;flake8&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flake8&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Weâ€™re using &lt;a href=&quot;https://flake8.pycqa.org/en/latest/&quot;&gt;flake8&lt;/a&gt; linter.&lt;/p&gt;

&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flake8 ./core
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to check for errors and warnings. If there are any errors, you need to fix them manually.&lt;/p&gt;

&lt;h3 id=&quot;dashboard&quot;&gt;Dashboard&lt;/h3&gt;

&lt;h4 id=&quot;debugging&quot;&gt;Debugging&lt;/h4&gt;

&lt;h5 id=&quot;webstorm&quot;&gt;Webstorm&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;Run dashboard app using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker compose&lt;/code&gt; or locally&lt;/li&gt;
  &lt;li&gt;Open &lt;a href=&quot;.&quot;&gt;dashboard&lt;/a&gt; folder in Webstorm&lt;/li&gt;
  &lt;li&gt;Select Run/debug configuration &amp;gt; Add New &amp;gt; Select &lt;em&gt;JavaScript Debug&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use the URL, where the dashboard is running (see the example below)
 &lt;img src=&quot;../images/configuration.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Then, run debuging using &lt;em&gt;Debug&lt;/em&gt; button in menu. &lt;br /&gt;
(Also note that this way, youâ€™ll be able to debug client-side code 
only - therefore not e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getServerSideProps&lt;/code&gt; method)&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;eslint&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eslint&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;We use &lt;a href=&quot;https://nextjs.org/docs/basic-features/eslint&quot;&gt;ESLint integrated in Next.js&lt;/a&gt; for linting&lt;/p&gt;

&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run lint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to check for warnings.&lt;/p&gt;

&lt;p&gt;If there are any warnings, you can fix them automatically (if possible) by running:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run lint &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--fix&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;prettier&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prettier&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;We use &lt;a href=&quot;https://prettier.io/&quot;&gt;prettier&lt;/a&gt; code formatter.&lt;/p&gt;

&lt;p&gt;Run&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run format
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to format source code files.&lt;/p&gt;

&lt;h3 id=&quot;storefront&quot;&gt;Storefront&lt;/h3&gt;

&lt;h4 id=&quot;eslint-1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eslint&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;We use &lt;a href=&quot;https://nextjs.org/docs/basic-features/eslint&quot;&gt;ESLint integrated in Next.js&lt;/a&gt; for linting&lt;/p&gt;

&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run lint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to check for warnings.&lt;/p&gt;

&lt;p&gt;If there are any warnings, you can fix them automatically (if possible) by running:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run lint &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--fix&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;prettier-1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prettier&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;We use &lt;a href=&quot;https://prettier.io/&quot;&gt;prettier&lt;/a&gt; code formatter.&lt;/p&gt;

&lt;p&gt;Run&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run format
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to format source code files.&lt;/p&gt;

&lt;h3 id=&quot;recommender&quot;&gt;Recommender&lt;/h3&gt;

&lt;h4 id=&quot;black-1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;black&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Weâ€™re using &lt;a href=&quot;https://black.readthedocs.io/en/stable/&quot;&gt;black&lt;/a&gt; code formatter.&lt;/p&gt;

&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;black ./src
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to format source files (you need to have virtual env activated).&lt;/p&gt;

&lt;h4 id=&quot;flake8-1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flake8&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Weâ€™re using &lt;a href=&quot;https://flake8.pycqa.org/en/latest/&quot;&gt;flake8&lt;/a&gt; linter.&lt;/p&gt;

&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flake8 ./src
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to check for errors and warnings. If there are any errors, you need to fix them manually.&lt;/p&gt;</content><author><name>{&quot;name&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil}</name></author><summary type="html">To contribute to ecoseller, please stick to the following rules:</summary></entry></feed>